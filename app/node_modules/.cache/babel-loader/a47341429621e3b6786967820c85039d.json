{"ast":null,"code":"import _classCallCheck from \"/Users/adamwatters/tfw/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adamwatters/tfw/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/adamwatters/tfw/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/adamwatters/tfw/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/adamwatters/tfw/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/adamwatters/tfw/src/components/Pomodoro.js\";\nimport React, { Component } from \"react\";\n\nvar PomodoroContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PomodoroContainer, _Component);\n\n  function PomodoroContainer() {\n    _classCallCheck(this, PomodoroContainer);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PomodoroContainer).apply(this, arguments));\n  }\n\n  _createClass(PomodoroContainer, [{\n    key: \"render\",\n    value: function render() {\n      return this.props.render();\n    }\n  }]);\n\n  return PomodoroContainer;\n}(Component);\n\nvar Pomodoro =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(Pomodoro, _Component2);\n\n  function Pomodoro() {\n    var _this;\n\n    _classCallCheck(this, Pomodoro);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Pomodoro).call(this));\n    _this.config = [{\n      segmentType: \"work\",\n      segmentLength: 1200\n    }, {\n      segmentType: \"break\",\n      segmentLength: 300\n    }, {\n      segmentType: \"work\",\n      segmentLength: 1200\n    }, {\n      segmentType: \"break\",\n      segmentLength: 300\n    }, {\n      segmentType: \"work\",\n      segmentLength: 1200\n    }, {\n      segmentType: \"break\",\n      segmentLength: 300\n    }, {\n      segmentType: \"work\",\n      segmentLength: 1200\n    }];\n    var persistedStateString = window.localStorage.getItem(\"pomodoro.state\");\n    _this.state = persistedStateString ? JSON.parse(persistedStateString) : {\n      clock: 1,\n      started: false\n    };\n    return _this;\n  }\n\n  _createClass(Pomodoro, [{\n    key: \"setClockInterval\",\n    value: function setClockInterval() {\n      var _this2 = this;\n\n      this.clockInterval = setInterval(function () {\n        _this2.setState({\n          clock: _this2.state.clock + 1\n        });\n      }, 1000);\n    }\n  }, {\n    key: \"resetClock\",\n    value: function resetClock() {\n      clearInterval(this.clockInterval);\n      this.setState({\n        started: false,\n        clock: 1\n      });\n    }\n  }, {\n    key: \"startClock\",\n    value: function startClock() {\n      this.setState({\n        started: true\n      });\n      this.setClockInterval();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // if state is booted from local storage\n      if (this.state.started) {\n        this.setClockInterval();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      window.localStorage.setItem(\"pomodoro.state\", JSON.stringify(this.state));\n    }\n  }, {\n    key: \"renderSegments\",\n    value: function renderSegments(segments) {\n      return segments.map(function (s, i) {\n        if (s.status === \"complete\") {\n          return React.createElement(\"div\", {\n            key: i,\n            style: {\n              width: \"18px\",\n              height: \"18px\",\n              backgroundColor: s.segmentType === \"work\" ? \"rgb(16, 188, 94)\" : \"rgb(244, 134, 65)\",\n              borderRadius: \"50%\",\n              margin: \"3px\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63\n            },\n            __self: this\n          });\n        }\n\n        return React.createElement(\"div\", {\n          key: i,\n          style: {\n            width: \"18px\",\n            height: \"18px\",\n            position: \"relative\",\n            lineHeight: \"24px\",\n            fontSize: \"14px\",\n            textAlign: \"center\",\n            backgroundColor: s.segmentType === \"work\" ? \"rgb(16, 188, 94, .3)\" : \"rgb(244, 134, 65, .3)\",\n            margin: \"3px\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          style: {\n            backgroundColor: s.segmentType === \"work\" ? \"rgb(16, 188, 94, 1)\" : \"rgb(244, 134, 65, 1)\",\n            position: \"absolute\",\n            bottom: 0,\n            left: 0,\n            right: 0,\n            height: \"\".concat((s.segmentLength - s.remaining) / s.segmentLength * 100, \"%\")\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }));\n      });\n    }\n  }, {\n    key: \"renderBreakWall\",\n    value: function renderBreakWall(breakTimeRemaining) {\n      return !!breakTimeRemaining && React.createElement(\"div\", {\n        style: {\n          position: \"absolute\",\n          left: 0,\n          bottom: 0,\n          top: 0,\n          right: 0,\n          display: \"flex\",\n          flexDirection: \"row\",\n          alignContent: \"center\",\n          alignItems: \"center\",\n          color: \"white\",\n          backgroundColor: \"black\",\n          opacity: 0.8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          textAlign: \"center\",\n          width: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \"Break Time - \".concat(breakTimeRemaining, \"  second\").concat(breakTimeRemaining === 1 ? \"\" : \"s\", \" remaining\")));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var distributableTime = this.state.clock;\n      var segments = [];\n      var breakTimeRemaining = null;\n      this.config.forEach(function (s) {\n        if (distributableTime === 0) {\n          segments.push({\n            segmentType: s.segmentType,\n            segmentLength: s.segmentLength,\n            remaining: s.segmentLength,\n            status: \"future\"\n          });\n        } else if (distributableTime <= s.segmentLength) {\n          if (s.segmentType === \"break\") {\n            breakTimeRemaining = s.segmentLength - distributableTime;\n          }\n\n          segments.push({\n            segmentType: s.segmentType,\n            segmentLength: s.segmentLength,\n            remaining: s.segmentLength - distributableTime,\n            status: \"active\"\n          });\n          distributableTime = 0;\n        } else if (distributableTime > s.segmentLength) {\n          segments.push({\n            segmentType: s.segmentType,\n            segmentLength: s.segmentLength,\n            remaining: s.segmentLength - distributableTime,\n            status: \"complete\"\n          });\n          distributableTime = distributableTime - s.segmentLength;\n        }\n      });\n      return React.createElement(\"div\", {\n        style: {\n          position: \"absolute\",\n          left: 0,\n          right: 0,\n          top: 0,\n          bottom: 0,\n          display: \"flex\",\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          opacity: 0.8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, this.state.started ? this.props.children : React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this3.startClock();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, \"Start\"), React.createElement(\"div\", {\n        onClick: function onClick() {\n          if (window.confirm(\"Are you sure you want to reset the timer?\")) {\n            _this3.resetClock();\n          }\n        },\n        style: {\n          position: \"absolute\",\n          left: 0,\n          bottom: 0,\n          display: \"flex\",\n          flexDirection: \"row\",\n          opacity: 0.8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, this.renderSegments(segments)), this.renderBreakWall(breakTimeRemaining));\n    }\n  }]);\n\n  return Pomodoro;\n}(Component);\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/adamwatters/tfw/src/components/Pomodoro.js"],"names":["React","Component","PomodoroContainer","props","render","Pomodoro","config","segmentType","segmentLength","persistedStateString","window","localStorage","getItem","state","JSON","parse","clock","started","clockInterval","setInterval","setState","clearInterval","setClockInterval","setItem","stringify","segments","map","s","i","status","width","height","backgroundColor","borderRadius","margin","position","lineHeight","fontSize","textAlign","bottom","left","right","remaining","breakTimeRemaining","top","display","flexDirection","alignContent","alignItems","color","opacity","distributableTime","forEach","push","justifyContent","children","startClock","confirm","resetClock","renderSegments","renderBreakWall"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nclass PomodoroContainer extends Component {\n  render() {\n    return this.props.render();\n  }\n}\n\nclass Pomodoro extends Component {\n  constructor() {\n    super();\n    this.config = [\n      { segmentType: \"work\", segmentLength: 1200 },\n      { segmentType: \"break\", segmentLength: 300 },\n      { segmentType: \"work\", segmentLength: 1200 },\n      { segmentType: \"break\", segmentLength: 300 },\n      { segmentType: \"work\", segmentLength: 1200 },\n      { segmentType: \"break\", segmentLength: 300 },\n      { segmentType: \"work\", segmentLength: 1200 }\n    ];\n    const persistedStateString = window.localStorage.getItem(\"pomodoro.state\");\n    this.state = persistedStateString\n      ? JSON.parse(persistedStateString)\n      : {\n          clock: 1,\n          started: false\n        };\n  }\n\n  setClockInterval() {\n    this.clockInterval = setInterval(() => {\n      this.setState({\n        clock: this.state.clock + 1\n      });\n    }, 1000);\n  }\n\n  resetClock() {\n    clearInterval(this.clockInterval);\n    this.setState({ started: false, clock: 1 });\n  }\n\n  startClock() {\n    this.setState({ started: true });\n    this.setClockInterval();\n  }\n\n  componentDidMount() {\n    // if state is booted from local storage\n    if (this.state.started) {\n      this.setClockInterval();\n    }\n  }\n\n  componentDidUpdate() {\n    window.localStorage.setItem(\"pomodoro.state\", JSON.stringify(this.state));\n  }\n\n  renderSegments(segments) {\n    return segments.map((s, i) => {\n      if (s.status === \"complete\") {\n        return (\n          <div\n            key={i}\n            style={{\n              width: \"18px\",\n              height: \"18px\",\n              backgroundColor:\n                s.segmentType === \"work\"\n                  ? \"rgb(16, 188, 94)\"\n                  : \"rgb(244, 134, 65)\",\n              borderRadius: \"50%\",\n              margin: \"3px\"\n            }}\n          />\n        );\n      }\n      return (\n        <div\n          key={i}\n          style={{\n            width: \"18px\",\n            height: \"18px\",\n            position: \"relative\",\n            lineHeight: \"24px\",\n            fontSize: \"14px\",\n            textAlign: \"center\",\n            backgroundColor:\n              s.segmentType === \"work\"\n                ? \"rgb(16, 188, 94, .3)\"\n                : \"rgb(244, 134, 65, .3)\",\n            margin: \"3px\"\n          }}\n        >\n          <div\n            style={{\n              backgroundColor:\n                s.segmentType === \"work\"\n                  ? \"rgb(16, 188, 94, 1)\"\n                  : \"rgb(244, 134, 65, 1)\",\n              position: \"absolute\",\n              bottom: 0,\n              left: 0,\n              right: 0,\n              height: `${((s.segmentLength - s.remaining) / s.segmentLength) *\n                100}%`\n            }}\n          />\n        </div>\n      );\n    });\n  }\n\n  renderBreakWall(breakTimeRemaining) {\n    return (\n      !!breakTimeRemaining && (\n        <div\n          style={{\n            position: \"absolute\",\n            left: 0,\n            bottom: 0,\n            top: 0,\n            right: 0,\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignContent: \"center\",\n            alignItems: \"center\",\n            color: \"white\",\n            backgroundColor: \"black\",\n            opacity: 0.8\n          }}\n        >\n          <div style={{ textAlign: \"center\", width: \"100%\" }}>\n            {`Break Time - ${breakTimeRemaining}  second${\n              breakTimeRemaining === 1 ? \"\" : \"s\"\n            } remaining`}\n          </div>\n        </div>\n      )\n    );\n  }\n\n  render() {\n    let distributableTime = this.state.clock;\n    const segments = [];\n    let breakTimeRemaining = null;\n    this.config.forEach(s => {\n      if (distributableTime === 0) {\n        segments.push({\n          segmentType: s.segmentType,\n          segmentLength: s.segmentLength,\n          remaining: s.segmentLength,\n          status: \"future\"\n        });\n      } else if (distributableTime <= s.segmentLength) {\n        if (s.segmentType === \"break\") {\n          breakTimeRemaining = s.segmentLength - distributableTime;\n        }\n        segments.push({\n          segmentType: s.segmentType,\n          segmentLength: s.segmentLength,\n          remaining: s.segmentLength - distributableTime,\n          status: \"active\"\n        });\n        distributableTime = 0;\n      } else if (distributableTime > s.segmentLength) {\n        segments.push({\n          segmentType: s.segmentType,\n          segmentLength: s.segmentLength,\n          remaining: s.segmentLength - distributableTime,\n          status: \"complete\"\n        });\n        distributableTime = distributableTime - s.segmentLength;\n      }\n    });\n    return (\n      <div\n        style={{\n          position: \"absolute\",\n          left: 0,\n          right: 0,\n          top: 0,\n          bottom: 0,\n          display: \"flex\",\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          opacity: 0.8\n        }}\n      >\n        {this.state.started ? (\n          this.props.children\n        ) : (\n          <button onClick={() => this.startClock()}>Start</button>\n        )}\n        <div\n          onClick={() => {\n            if (window.confirm(\"Are you sure you want to reset the timer?\")) {\n              this.resetClock();\n            }\n          }}\n          style={{\n            position: \"absolute\",\n            left: 0,\n            bottom: 0,\n            display: \"flex\",\n            flexDirection: \"row\",\n            opacity: 0.8\n          }}\n        >\n          {this.renderSegments(segments)}\n        </div>\n        {this.renderBreakWall(breakTimeRemaining)}\n      </div>\n    );\n  }\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}