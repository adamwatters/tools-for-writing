{"ast":null,"code":"import _classCallCheck from \"/Users/adamwatters/tfw/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adamwatters/tfw/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/adamwatters/tfw/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/adamwatters/tfw/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/adamwatters/tfw/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { Component } from \"react\";\nimport { debug } from \"util\";\n\nvar Timer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Timer, _Component);\n\n  function Timer() {\n    var _this;\n\n    _classCallCheck(this, Timer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Timer).call(this));\n\n    _this.resetClock = function () {\n      clearInterval(_this.clockInterval);\n\n      _this.setState({\n        started: false,\n        clock: 1\n      });\n    };\n\n    _this.config = [{\n      segmentType: \"work\",\n      segmentLength: 1200\n    }, {\n      segmentType: \"break\",\n      segmentLength: 300\n    }, {\n      segmentType: \"work\",\n      segmentLength: 1200\n    }, {\n      segmentType: \"break\",\n      segmentLength: 300\n    }, {\n      segmentType: \"work\",\n      segmentLength: 1200\n    }, {\n      segmentType: \"break\",\n      segmentLength: 300\n    }, {\n      segmentType: \"work\",\n      segmentLength: 1200\n    }];\n    var persistedStateString = window.localStorage.getItem(\"pomodoro.state\");\n    _this.state = persistedStateString ? JSON.parse(persistedStateString) : {\n      clock: 1,\n      started: false\n    };\n    return _this;\n  }\n\n  _createClass(Timer, [{\n    key: \"setClockInterval\",\n    value: function setClockInterval() {\n      var _this2 = this;\n\n      this.clockInterval = setInterval(function () {\n        _this2.setState({\n          clock: _this2.state.clock + 1\n        });\n      }, 1000);\n    }\n  }, {\n    key: \"startClock\",\n    value: function startClock() {\n      this.setState({\n        started: true\n      });\n      this.setClockInterval();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // if state is booted from local storage\n      if (this.state.started) {\n        this.setClockInterval();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      window.localStorage.setItem(\"pomodoro.state\", JSON.stringify(this.state));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var distributableTime = this.state.clock;\n      var segments = [];\n      var breakTimeRemaining = null;\n      this.config.forEach(function (s) {\n        if (distributableTime === 0) {\n          segments.push({\n            segmentType: s.segmentType,\n            segmentLength: s.segmentLength,\n            remaining: s.segmentLength,\n            status: \"future\"\n          });\n        } else if (distributableTime <= s.segmentLength) {\n          if (s.segmentType === \"break\") {\n            breakTimeRemaining = s.segmentLength - distributableTime;\n          }\n\n          segments.push({\n            segmentType: s.segmentType,\n            segmentLength: s.segmentLength,\n            remaining: s.segmentLength - distributableTime,\n            status: \"active\"\n          });\n          distributableTime = 0;\n        } else if (distributableTime > s.segmentLength) {\n          segments.push({\n            segmentType: s.segmentType,\n            segmentLength: s.segmentLength,\n            remaining: s.segmentLength - distributableTime,\n            status: \"complete\"\n          });\n          distributableTime = distributableTime - s.segmentLength;\n        }\n      });\n      return this.props.render(this.state, this.startClock, this.resetClock, segments, breakTimeRemaining);\n    }\n  }]);\n\n  return Timer;\n}(Component);\n\nexport default Timer;","map":{"version":3,"sources":["/Users/adamwatters/tfw/src/components/Timer.js"],"names":["Component","debug","Timer","resetClock","clearInterval","clockInterval","setState","started","clock","config","segmentType","segmentLength","persistedStateString","window","localStorage","getItem","state","JSON","parse","setInterval","setClockInterval","setItem","stringify","distributableTime","segments","breakTimeRemaining","forEach","s","push","remaining","status","props","render","startClock"],"mappings":"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","sourcesContent":["import { Component } from \"react\";\nimport { debug } from \"util\";\n\nclass Timer extends Component {\n  constructor() {\n    super();\n    this.config = [\n      { segmentType: \"work\", segmentLength: 1200 },\n      { segmentType: \"break\", segmentLength: 300 },\n      { segmentType: \"work\", segmentLength: 1200 },\n      { segmentType: \"break\", segmentLength: 300 },\n      { segmentType: \"work\", segmentLength: 1200 },\n      { segmentType: \"break\", segmentLength: 300 },\n      { segmentType: \"work\", segmentLength: 1200 }\n    ];\n    const persistedStateString = window.localStorage.getItem(\"pomodoro.state\");\n    this.state = persistedStateString\n      ? JSON.parse(persistedStateString)\n      : {\n          clock: 1,\n          started: false\n        };\n  }\n  setClockInterval() {\n    this.clockInterval = setInterval(() => {\n      this.setState({\n        clock: this.state.clock + 1\n      });\n    }, 1000);\n  }\n\n  resetClock = () => {\n    clearInterval(this.clockInterval);\n    this.setState({ started: false, clock: 1 });\n  };\n\n  startClock() {\n    this.setState({ started: true });\n    this.setClockInterval();\n  }\n\n  componentDidMount() {\n    // if state is booted from local storage\n    if (this.state.started) {\n      this.setClockInterval();\n    }\n  }\n\n  componentDidUpdate() {\n    window.localStorage.setItem(\"pomodoro.state\", JSON.stringify(this.state));\n  }\n\n  render() {\n    let distributableTime = this.state.clock;\n    const segments = [];\n    let breakTimeRemaining = null;\n    this.config.forEach(s => {\n      if (distributableTime === 0) {\n        segments.push({\n          segmentType: s.segmentType,\n          segmentLength: s.segmentLength,\n          remaining: s.segmentLength,\n          status: \"future\"\n        });\n      } else if (distributableTime <= s.segmentLength) {\n        if (s.segmentType === \"break\") {\n          breakTimeRemaining = s.segmentLength - distributableTime;\n        }\n        segments.push({\n          segmentType: s.segmentType,\n          segmentLength: s.segmentLength,\n          remaining: s.segmentLength - distributableTime,\n          status: \"active\"\n        });\n        distributableTime = 0;\n      } else if (distributableTime > s.segmentLength) {\n        segments.push({\n          segmentType: s.segmentType,\n          segmentLength: s.segmentLength,\n          remaining: s.segmentLength - distributableTime,\n          status: \"complete\"\n        });\n        distributableTime = distributableTime - s.segmentLength;\n      }\n    });\n    return this.props.render(\n      this.state,\n      this.startClock,\n      this.resetClock,\n      segments,\n      breakTimeRemaining\n    );\n  }\n}\n\nexport default Timer;\n"]},"metadata":{},"sourceType":"module"}