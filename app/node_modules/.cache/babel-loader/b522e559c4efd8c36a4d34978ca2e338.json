{"ast":null,"code":"import _classCallCheck from \"/Users/adamwatters/tfw/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adamwatters/tfw/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/adamwatters/tfw/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/adamwatters/tfw/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/adamwatters/tfw/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/adamwatters/tfw/src/components/Pomodoro.js\";\nimport React, { Component } from \"react\";\nimport Timer from \"./Timer\";\n\nvar Pomodoro =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Pomodoro, _Component);\n\n  function Pomodoro() {\n    _classCallCheck(this, Pomodoro);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Pomodoro).apply(this, arguments));\n  }\n\n  _createClass(Pomodoro, [{\n    key: \"renderSegments\",\n    value: function renderSegments(segments) {\n      return segments.map(function (s, i) {\n        if (s.status === \"complete\") {\n          return React.createElement(\"div\", {\n            key: i,\n            style: {\n              width: \"18px\",\n              height: \"18px\",\n              backgroundColor: s.segmentType === \"work\" ? \"rgb(16, 188, 94)\" : \"rgb(244, 134, 65)\",\n              borderRadius: \"50%\",\n              margin: \"3px\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 9\n            },\n            __self: this\n          });\n        }\n\n        return React.createElement(\"div\", {\n          key: i,\n          style: {\n            width: \"18px\",\n            height: \"18px\",\n            position: \"relative\",\n            lineHeight: \"24px\",\n            fontSize: \"14px\",\n            textAlign: \"center\",\n            backgroundColor: s.segmentType === \"work\" ? \"rgb(16, 188, 94, .3)\" : \"rgb(244, 134, 65, .3)\",\n            margin: \"3px\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          style: {\n            backgroundColor: s.segmentType === \"work\" ? \"rgb(16, 188, 94, 1)\" : \"rgb(244, 134, 65, 1)\",\n            position: \"absolute\",\n            bottom: 0,\n            left: 0,\n            right: 0,\n            height: \"\".concat((s.segmentLength - s.remaining) / s.segmentLength * 100, \"%\")\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }));\n      });\n    }\n  }, {\n    key: \"renderBreakWall\",\n    value: function renderBreakWall(breakTimeRemaining) {\n      return !!breakTimeRemaining && React.createElement(\"div\", {\n        style: {\n          position: \"absolute\",\n          left: 0,\n          bottom: 0,\n          top: 0,\n          right: 0,\n          display: \"flex\",\n          flexDirection: \"row\",\n          alignContent: \"center\",\n          alignItems: \"center\",\n          color: \"white\",\n          backgroundColor: \"black\",\n          opacity: 0.8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          textAlign: \"center\",\n          width: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Break Time - \".concat(breakTimeRemaining, \"  second\").concat(breakTimeRemaining === 1 ? \"\" : \"s\", \" remaining\")));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var distributableTime = this.state.clock;\n      var segments = [];\n      var breakTimeRemaining = null;\n      this.config.forEach(function (s) {\n        if (distributableTime === 0) {\n          segments.push({\n            segmentType: s.segmentType,\n            segmentLength: s.segmentLength,\n            remaining: s.segmentLength,\n            status: \"future\"\n          });\n        } else if (distributableTime <= s.segmentLength) {\n          if (s.segmentType === \"break\") {\n            breakTimeRemaining = s.segmentLength - distributableTime;\n          }\n\n          segments.push({\n            segmentType: s.segmentType,\n            segmentLength: s.segmentLength,\n            remaining: s.segmentLength - distributableTime,\n            status: \"active\"\n          });\n          distributableTime = 0;\n        } else if (distributableTime > s.segmentLength) {\n          segments.push({\n            segmentType: s.segmentType,\n            segmentLength: s.segmentLength,\n            remaining: s.segmentLength - distributableTime,\n            status: \"complete\"\n          });\n          distributableTime = distributableTime - s.segmentLength;\n        }\n      });\n      return React.createElement(\"div\", {\n        style: {\n          position: \"absolute\",\n          left: 0,\n          right: 0,\n          top: 0,\n          bottom: 0,\n          display: \"flex\",\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          opacity: 0.8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, this.state.started ? this.props.children : React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this.startClock();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, \"Start\"), React.createElement(\"div\", {\n        onClick: function onClick() {\n          if (window.confirm(\"Are you sure you want to reset the timer?\")) {\n            _this.resetClock();\n          }\n        },\n        style: {\n          position: \"absolute\",\n          left: 0,\n          bottom: 0,\n          display: \"flex\",\n          flexDirection: \"row\",\n          opacity: 0.8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, this.renderSegments(segments)), this.renderBreakWall(breakTimeRemaining));\n    }\n  }]);\n\n  return Pomodoro;\n}(Component);\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/adamwatters/tfw/src/components/Pomodoro.js"],"names":["React","Component","Timer","Pomodoro","segments","map","s","i","status","width","height","backgroundColor","segmentType","borderRadius","margin","position","lineHeight","fontSize","textAlign","bottom","left","right","segmentLength","remaining","breakTimeRemaining","top","display","flexDirection","alignContent","alignItems","color","opacity","distributableTime","state","clock","config","forEach","push","justifyContent","started","props","children","startClock","window","confirm","resetClock","renderSegments","renderBreakWall"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Timer from \"./Timer\";\n\nclass Pomodoro extends Component {\n  renderSegments(segments) {\n    return segments.map((s, i) => {\n      if (s.status === \"complete\") {\n        return (\n          <div\n            key={i}\n            style={{\n              width: \"18px\",\n              height: \"18px\",\n              backgroundColor:\n                s.segmentType === \"work\"\n                  ? \"rgb(16, 188, 94)\"\n                  : \"rgb(244, 134, 65)\",\n              borderRadius: \"50%\",\n              margin: \"3px\"\n            }}\n          />\n        );\n      }\n      return (\n        <div\n          key={i}\n          style={{\n            width: \"18px\",\n            height: \"18px\",\n            position: \"relative\",\n            lineHeight: \"24px\",\n            fontSize: \"14px\",\n            textAlign: \"center\",\n            backgroundColor:\n              s.segmentType === \"work\"\n                ? \"rgb(16, 188, 94, .3)\"\n                : \"rgb(244, 134, 65, .3)\",\n            margin: \"3px\"\n          }}\n        >\n          <div\n            style={{\n              backgroundColor:\n                s.segmentType === \"work\"\n                  ? \"rgb(16, 188, 94, 1)\"\n                  : \"rgb(244, 134, 65, 1)\",\n              position: \"absolute\",\n              bottom: 0,\n              left: 0,\n              right: 0,\n              height: `${((s.segmentLength - s.remaining) / s.segmentLength) *\n                100}%`\n            }}\n          />\n        </div>\n      );\n    });\n  }\n\n  renderBreakWall(breakTimeRemaining) {\n    return (\n      !!breakTimeRemaining && (\n        <div\n          style={{\n            position: \"absolute\",\n            left: 0,\n            bottom: 0,\n            top: 0,\n            right: 0,\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignContent: \"center\",\n            alignItems: \"center\",\n            color: \"white\",\n            backgroundColor: \"black\",\n            opacity: 0.8\n          }}\n        >\n          <div style={{ textAlign: \"center\", width: \"100%\" }}>\n            {`Break Time - ${breakTimeRemaining}  second${\n              breakTimeRemaining === 1 ? \"\" : \"s\"\n            } remaining`}\n          </div>\n        </div>\n      )\n    );\n  }\n\n  render() {\n    let distributableTime = this.state.clock;\n    const segments = [];\n    let breakTimeRemaining = null;\n    this.config.forEach(s => {\n      if (distributableTime === 0) {\n        segments.push({\n          segmentType: s.segmentType,\n          segmentLength: s.segmentLength,\n          remaining: s.segmentLength,\n          status: \"future\"\n        });\n      } else if (distributableTime <= s.segmentLength) {\n        if (s.segmentType === \"break\") {\n          breakTimeRemaining = s.segmentLength - distributableTime;\n        }\n        segments.push({\n          segmentType: s.segmentType,\n          segmentLength: s.segmentLength,\n          remaining: s.segmentLength - distributableTime,\n          status: \"active\"\n        });\n        distributableTime = 0;\n      } else if (distributableTime > s.segmentLength) {\n        segments.push({\n          segmentType: s.segmentType,\n          segmentLength: s.segmentLength,\n          remaining: s.segmentLength - distributableTime,\n          status: \"complete\"\n        });\n        distributableTime = distributableTime - s.segmentLength;\n      }\n    });\n    return (\n      <div\n        style={{\n          position: \"absolute\",\n          left: 0,\n          right: 0,\n          top: 0,\n          bottom: 0,\n          display: \"flex\",\n          flexDirection: \"row\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          opacity: 0.8\n        }}\n      >\n        {this.state.started ? (\n          this.props.children\n        ) : (\n          <button onClick={() => this.startClock()}>Start</button>\n        )}\n        <div\n          onClick={() => {\n            if (window.confirm(\"Are you sure you want to reset the timer?\")) {\n              this.resetClock();\n            }\n          }}\n          style={{\n            position: \"absolute\",\n            left: 0,\n            bottom: 0,\n            display: \"flex\",\n            flexDirection: \"row\",\n            opacity: 0.8\n          }}\n        >\n          {this.renderSegments(segments)}\n        </div>\n        {this.renderBreakWall(breakTimeRemaining)}\n      </div>\n    );\n  }\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}