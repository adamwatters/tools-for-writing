{"ast":null,"code":"import _classCallCheck from \"/Users/adamwatters/tfw/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/adamwatters/tfw/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/adamwatters/tfw/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/adamwatters/tfw/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/adamwatters/tfw/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/adamwatters/tfw/src/components/Tomato.js\";\nimport React, { Component } from \"react\";\nimport Timer from \"./Timer\";\n\nvar Pomodoro =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Pomodoro, _Component);\n\n  function Pomodoro() {\n    _classCallCheck(this, Pomodoro);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Pomodoro).apply(this, arguments));\n  }\n\n  _createClass(Pomodoro, [{\n    key: \"renderSegments\",\n    value: function renderSegments(segments) {\n      return segments.map(function (s, i) {\n        if (s.status === \"complete\") {\n          return React.createElement(\"div\", {\n            key: i,\n            style: {\n              width: \"18px\",\n              height: \"18px\",\n              backgroundColor: s.segmentType === \"work\" ? \"rgb(16, 188, 94)\" : \"rgb(244, 134, 65)\",\n              borderRadius: \"50%\",\n              margin: \"3px\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 9\n            },\n            __self: this\n          });\n        }\n\n        return React.createElement(\"div\", {\n          key: i,\n          style: {\n            width: \"18px\",\n            height: \"18px\",\n            position: \"relative\",\n            lineHeight: \"24px\",\n            fontSize: \"14px\",\n            textAlign: \"center\",\n            backgroundColor: s.segmentType === \"work\" ? \"rgb(16, 188, 94, .3)\" : \"rgb(244, 134, 65, .3)\",\n            margin: \"3px\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          style: {\n            backgroundColor: s.segmentType === \"work\" ? \"rgb(16, 188, 94, 1)\" : \"rgb(244, 134, 65, 1)\",\n            position: \"absolute\",\n            bottom: 0,\n            left: 0,\n            right: 0,\n            height: \"\".concat((s.segmentLength - s.remaining) / s.segmentLength * 100, \"%\")\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }));\n      });\n    }\n  }, {\n    key: \"renderBreakWall\",\n    value: function renderBreakWall(breakTimeRemaining) {\n      return !!breakTimeRemaining && React.createElement(\"div\", {\n        style: {\n          position: \"absolute\",\n          left: 0,\n          bottom: 0,\n          top: 0,\n          right: 0,\n          display: \"flex\",\n          flexDirection: \"row\",\n          alignContent: \"center\",\n          alignItems: \"center\",\n          color: \"white\",\n          backgroundColor: \"black\",\n          opacity: 0.8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          textAlign: \"center\",\n          width: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Break Time - \".concat(breakTimeRemaining, \"  second\").concat(breakTimeRemaining === 1 ? \"\" : \"s\", \" remaining\")));\n    }\n  }, {\n    key: \"renderPausedWall\",\n    value: function renderPausedWall(timerState, unpauseClock) {\n      return !!timerState.paused && React.createElement(\"div\", {\n        onClick: unpauseClock(),\n        style: {\n          position: \"absolute\",\n          left: 0,\n          bottom: 0,\n          top: 0,\n          right: 0,\n          display: \"flex\",\n          flexDirection: \"row\",\n          alignContent: \"center\",\n          alignItems: \"center\",\n          color: \"white\",\n          backgroundColor: \"black\",\n          opacity: 0.8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          textAlign: \"center\",\n          width: \"100%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"PAUSED (click anywhere to unpause)\"));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      return React.createElement(Timer, {\n        render: function render(timerState, startClock, resetClock, pauseClock, unpauseClock, segments, breakTimeRemaining) {\n          return React.createElement(\"div\", {\n            style: {\n              position: \"absolute\",\n              left: 0,\n              right: 0,\n              top: 0,\n              bottom: 0,\n              display: \"flex\",\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              opacity: 0.8\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 130\n            },\n            __self: this\n          }, timerState.started ? _this.props.children : React.createElement(\"button\", {\n            onClick: startClock,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 147\n            },\n            __self: this\n          }, \"Start\"), React.createElement(\"div\", {\n            onClick: function onClick() {\n              if (window.confirm(\"Is it an emergency? Do not deviate from the Tomato System lightly\")) {\n                pauseClock();\n              }\n            },\n            style: {\n              position: \"absolute\",\n              left: 0,\n              bottom: 0,\n              display: \"flex\",\n              flexDirection: \"row\",\n              opacity: 0.8\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 149\n            },\n            __self: this\n          }, \"PAUSE\"), React.createElement(\"div\", {\n            onClick: function onClick() {\n              if (window.confirm(\"Are you sure you want to reset the timer?\")) {\n                resetClock();\n              }\n            },\n            style: {\n              position: \"absolute\",\n              left: 0,\n              bottom: 0,\n              display: \"flex\",\n              flexDirection: \"row\",\n              opacity: 0.8\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 170\n            },\n            __self: this\n          }, _this.renderSegments(segments)), _this.renderBreakWall(breakTimeRemaining), _this.renderPausedWall(timerState, unpauseClock));\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return Pomodoro;\n}(Component);\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/adamwatters/tfw/src/components/Tomato.js"],"names":["React","Component","Timer","Pomodoro","segments","map","s","i","status","width","height","backgroundColor","segmentType","borderRadius","margin","position","lineHeight","fontSize","textAlign","bottom","left","right","segmentLength","remaining","breakTimeRemaining","top","display","flexDirection","alignContent","alignItems","color","opacity","timerState","unpauseClock","paused","startClock","resetClock","pauseClock","justifyContent","started","props","children","window","confirm","renderSegments","renderBreakWall","renderPausedWall"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Timer from \"./Timer\";\n\nclass Pomodoro extends Component {\n  renderSegments(segments) {\n    return segments.map((s, i) => {\n      if (s.status === \"complete\") {\n        return (\n          <div\n            key={i}\n            style={{\n              width: \"18px\",\n              height: \"18px\",\n              backgroundColor:\n                s.segmentType === \"work\"\n                  ? \"rgb(16, 188, 94)\"\n                  : \"rgb(244, 134, 65)\",\n              borderRadius: \"50%\",\n              margin: \"3px\"\n            }}\n          />\n        );\n      }\n      return (\n        <div\n          key={i}\n          style={{\n            width: \"18px\",\n            height: \"18px\",\n            position: \"relative\",\n            lineHeight: \"24px\",\n            fontSize: \"14px\",\n            textAlign: \"center\",\n            backgroundColor:\n              s.segmentType === \"work\"\n                ? \"rgb(16, 188, 94, .3)\"\n                : \"rgb(244, 134, 65, .3)\",\n            margin: \"3px\"\n          }}\n        >\n          <div\n            style={{\n              backgroundColor:\n                s.segmentType === \"work\"\n                  ? \"rgb(16, 188, 94, 1)\"\n                  : \"rgb(244, 134, 65, 1)\",\n              position: \"absolute\",\n              bottom: 0,\n              left: 0,\n              right: 0,\n              height: `${((s.segmentLength - s.remaining) / s.segmentLength) *\n                100}%`\n            }}\n          />\n        </div>\n      );\n    });\n  }\n\n  renderBreakWall(breakTimeRemaining) {\n    return (\n      !!breakTimeRemaining && (\n        <div\n          style={{\n            position: \"absolute\",\n            left: 0,\n            bottom: 0,\n            top: 0,\n            right: 0,\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignContent: \"center\",\n            alignItems: \"center\",\n            color: \"white\",\n            backgroundColor: \"black\",\n            opacity: 0.8\n          }}\n        >\n          <div style={{ textAlign: \"center\", width: \"100%\" }}>\n            {`Break Time - ${breakTimeRemaining}  second${\n              breakTimeRemaining === 1 ? \"\" : \"s\"\n            } remaining`}\n          </div>\n        </div>\n      )\n    );\n  }\n\n  renderPausedWall(timerState, unpauseClock) {\n    return (\n      !!timerState.paused && (\n        <div\n          onClick={unpauseClock()}\n          style={{\n            position: \"absolute\",\n            left: 0,\n            bottom: 0,\n            top: 0,\n            right: 0,\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignContent: \"center\",\n            alignItems: \"center\",\n            color: \"white\",\n            backgroundColor: \"black\",\n            opacity: 0.8\n          }}\n        >\n          <div style={{ textAlign: \"center\", width: \"100%\" }}>\n            PAUSED (click anywhere to unpause)\n          </div>\n        </div>\n      )\n    );\n  }\n\n  render() {\n    return (\n      <Timer\n        render={(\n          timerState,\n          startClock,\n          resetClock,\n          pauseClock,\n          unpauseClock,\n          segments,\n          breakTimeRemaining\n        ) => {\n          return (\n            <div\n              style={{\n                position: \"absolute\",\n                left: 0,\n                right: 0,\n                top: 0,\n                bottom: 0,\n                display: \"flex\",\n                flexDirection: \"row\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                opacity: 0.8\n              }}\n            >\n              {timerState.started ? (\n                this.props.children\n              ) : (\n                <button onClick={startClock}>Start</button>\n              )}\n              <div\n                onClick={() => {\n                  if (\n                    window.confirm(\n                      \"Is it an emergency? Do not deviate from the Tomato System lightly\"\n                    )\n                  ) {\n                    pauseClock();\n                  }\n                }}\n                style={{\n                  position: \"absolute\",\n                  left: 0,\n                  bottom: 0,\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  opacity: 0.8\n                }}\n              >\n                PAUSE\n              </div>\n              <div\n                onClick={() => {\n                  if (\n                    window.confirm(\"Are you sure you want to reset the timer?\")\n                  ) {\n                    resetClock();\n                  }\n                }}\n                style={{\n                  position: \"absolute\",\n                  left: 0,\n                  bottom: 0,\n                  display: \"flex\",\n                  flexDirection: \"row\",\n                  opacity: 0.8\n                }}\n              >\n                {this.renderSegments(segments)}\n              </div>\n              {this.renderBreakWall(breakTimeRemaining)}\n              {this.renderPausedWall(timerState, unpauseClock)}\n            </div>\n          );\n        }}\n      />\n    );\n  }\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}